<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://charlieoneill11.github.io/charlieoneill/feed.xml" rel="self" type="application/atom+xml" /><link href="https://charlieoneill11.github.io/charlieoneill/" rel="alternate" type="text/html" /><updated>2022-05-12T20:02:06-05:00</updated><id>https://charlieoneill11.github.io/charlieoneill/feed.xml</id><title type="html">Charlie O’Neill</title><subtitle>Posts about deep learning, machine learning, causal inference, maths and computational neuroscience. ML researcher @ Macuject. UG Science + Eco @ ANU.</subtitle><entry><title type="html">Personal_pet</title><link href="https://charlieoneill11.github.io/charlieoneill/2022/05/12/personal_pet.html" rel="alternate" type="text/html" title="Personal_pet" /><published>2022-05-12T00:00:00-05:00</published><updated>2022-05-12T00:00:00-05:00</updated><id>https://charlieoneill11.github.io/charlieoneill/2022/05/12/personal_pet</id><author><name></name></author><summary type="html"><![CDATA[Personal pet project Using records: storing attributes in memory .data attributes: .word 5, 4, 3 Home screen: displaying attributes We need some way to show the user how their pet is going, in terms of both hunger and contentment, and also overall health. My initial thought was to use a single vertical bar for health, like so: ![[health_bar.jpg|300]] Each LED in this bar represented a health point. I would then show the pet to the right of this as its own entity i.e. a head and a body. However, after some experimentation, I decided that this system would be too clunky. I simply didn’t have enough screen space (that is, enough LEDs) for this system to be effective. Another problem with this approach is that it left me no room to display energy points. I would have had to implement a different peripheral (separate from the two buttons) if the user wanted to check how many energy points they had.]]></summary></entry><entry><title type="html">End-to-end Pytorch model in five minutes</title><link href="https://charlieoneill11.github.io/charlieoneill/python/pytorch/cnn/computer%20vision/2022/02/01/pytorch_model.html" rel="alternate" type="text/html" title="End-to-end Pytorch model in five minutes" /><published>2022-02-01T00:00:00-06:00</published><updated>2022-02-01T00:00:00-06:00</updated><id>https://charlieoneill11.github.io/charlieoneill/python/pytorch/cnn/computer%20vision/2022/02/01/pytorch_model</id><author><name></name></author><category term="python" /><category term="pytorch" /><category term="cnn" /><category term="computer vision" /><summary type="html"><![CDATA[Standardising dataloaders, model, training and validation - so you don't have to]]></summary></entry><entry><title type="html">Using RNNs for natural language tasks</title><link href="https://charlieoneill11.github.io/charlieoneill/lstm/pytorch/nlp/fastai/2022/01/19/nlp.html" rel="alternate" type="text/html" title="Using RNNs for natural language tasks" /><published>2022-01-19T00:00:00-06:00</published><updated>2022-01-19T00:00:00-06:00</updated><id>https://charlieoneill11.github.io/charlieoneill/lstm/pytorch/nlp/fastai/2022/01/19/nlp</id><author><name></name></author><category term="lstm" /><category term="pytorch" /><category term="nlp" /><category term="fastai" /><summary type="html"><![CDATA[Constructing AWD-LSTMs to predict the new word in Wikipedia texts]]></summary></entry><entry><title type="html">Multivariate time-series forecasting with Pytorch LSTMs</title><link href="https://charlieoneill11.github.io/charlieoneill/python/lstm/pytorch/2022/01/14/lstm2.html" rel="alternate" type="text/html" title="Multivariate time-series forecasting with Pytorch LSTMs" /><published>2022-01-14T00:00:00-06:00</published><updated>2022-01-14T00:00:00-06:00</updated><id>https://charlieoneill11.github.io/charlieoneill/python/lstm/pytorch/2022/01/14/lstm2</id><author><name></name></author><category term="python" /><category term="lstm" /><category term="pytorch" /><summary type="html"><![CDATA[Using recurrent neural networks for standard tabular time-series problems]]></summary></entry><entry><title type="html">Language model from scratch</title><link href="https://charlieoneill11.github.io/charlieoneill/text%20generation/lstm/pytorch/fastai/natural%20language/2022/01/14/lstm_scratch.html" rel="alternate" type="text/html" title="Language model from scratch" /><published>2022-01-14T00:00:00-06:00</published><updated>2022-01-14T00:00:00-06:00</updated><id>https://charlieoneill11.github.io/charlieoneill/text%20generation/lstm/pytorch/fastai/natural%20language/2022/01/14/lstm_scratch</id><author><name></name></author><category term="text generation" /><category term="lstm" /><category term="pytorch" /><category term="fastai" /><category term="natural language" /><summary type="html"><![CDATA[Building a custom LSTM for text generation]]></summary></entry></feed>