{
  
    
        "post0": {
            "title": "Personal_pet",
            "content": "Personal pet project . Using records: storing attributes in memory . .data attributes: .word 5, 4, 3 . Home screen: displaying attributes . We need some way to show the user how their pet is going, in terms of both hunger and contentment, and also overall health. My initial thought was to use a single vertical bar for health, like so: ![[health_bar.jpg|300]] Each LED in this bar represented a health point. I would then show the pet to the right of this as its own entity i.e. a head and a body. However, after some experimentation, I decided that this system would be too clunky. I simply didn’t have enough screen space (that is, enough LEDs) for this system to be effective. Another problem with this approach is that it left me no room to display energy points. I would have had to implement a different peripheral (separate from the two buttons) if the user wanted to check how many energy points they had. . Because of this, I decided to incorporate different attributes into the entity display of the pet itself. . This still left the issue of how to display energy points. Because it was a bit of a challenge, I decided to see if I could use the touch sensor to trigger a screen which would display the energy points left. . Rendering function . So, now that we have the design for the pet egg, we need a way to display all components of the egg at once. We can’t just have one function for rendering the egg. This is because different components of the egg rely on different attributes for how many LEDs to display. (I mean, I guess we could have one function, but it would get awfully messy.) Because of this, I’m going to write a function to display the health, hunger and happiness attributes separately. We’ll then write a render wrapper function over these three parts of the egg, looping through them so quickly that they appear to be show at the same time. . Initial display . Here’s the outline for my render function: . .type render, %function render: push {lr, r0-r4} mov r2, 0xff0 @ for-loop counter renderLoop: cmp r2, 0 ble endRender push {r2} @ do the actual display bl displayHunger bl displayHappiness bl displayHealth @ decrement, reenter loop pop {r2} sub r2, 1 b renderLoop endRender: pop {lr, r0-r4} bx lr . All we’re doing is using a simple for-loop to repeatedly ‘blip’ each attribute (represented as a different part of the egg) over and over, creating the illusion of a persistent image. Now, all we have to do is write the display functions. Health is the easiest, since that’s just a vertical bar down the middle. Let’s do that first: . .type displayHealth, %function displayHealth: push {lr} mov r2, 0x5 healthLoop: cmp r2, 0 ble endHealth push {r2} @ health bar mov r0, 0b11111 mov r1, 0b11011 bl frameBlip @ decrement, reenter loop pop {r2} sub r2, 1 b healthLoop endHealth: mov r0, 0b00000 mov r1, 0b11111 @ set all columns to high bl led_on @ clear LED screen pop {lr} bx lr . This is essentially the same structure as our render function above; we’ve just got another for-loop (an inner for-loop). The thing to note here is that we only go through this loop 5 times, in comparison to 0xff0 times for the render function. This is because we want to create persistence of vision; if we show each part of the egg for too long, the image won’t be persistent, because our eyes will be able to tell that we’re only displaying one component at a time. The 0x5 value was chosen through trial and error. . We now write essentially the same functions for the hunger and happiness attributes. And that’s it! We’ve done it. (It’s funny - it’s quite difficult to actually take a photo to show you because the photo obviously only captures one aspect of the egg. At least this is proof that it’s doing what we want it to do!) ![[egg.jpg|300]] . Reflecting updated attributes in the display . However, we haven’t finished our rendering function yet. We don’t just want a static egg - we want our egg to reflect the current state of the pet’s attributes in memory. This basically means that we’re going to need to wrap the render loop itself in an outer main loop. This loop will display the pet for a short period of time, check its attributes, and display it again based on the updated attributes. This way, if an event occurs (e.g. we’ve fed the pet, played with the pet, the timer has decremented the pet’s hunger, etc.) the state of the egg will be updated on the screen. . As we discussed above, if the pet’s attributes decrement, we’re going to turn off LEDs relating to that attribute in the display. This choice of display is probably a good one; it’s easy to imagine the egg decaying or breaking due to neglect or overstimulation. The order for removing LEDs will be: . Hunger and happiness: first, we’ll take out the middle LED. Then, the top and bottom LEDs (in that order). Finally, the 2nd and 4th LEDs. | Health: since health is a vertical bar, it’s a bit easier. We’ll take out the middle LED, then the 2nd and 4th LEDs, and finally the top and bottom LEDs. The bottom will be last because it represents the base of the egg. | . [!error] Warning Remember, once the final health point attribute goes (represented by the bottom LED in the health bar), the egg dies. . Setting up the two buttons . We need to configure the two buttons, A and B, to trigger a feeding event and a playing event respectively. . Configuring the touch sensor . Adding sounds . Endgame . No game would be complete without an objective. Since this project is only meant to be engaging over 2-3 minutes, I thought it would be fun to make the outcome of the game binary over such a time: either you keep the pet alive, or it dies. If it stays alive, we can display some sort of evolution animation of the pet breaking out of its shell. . Improving the code . Refactoring display functions using memory .",
            "url": "https://charlieoneill11.github.io/charlieoneill/2022/05/12/personal_pet.html",
            "relUrl": "/2022/05/12/personal_pet.html",
            "date": " • May 12, 2022"
        }
        
    
  
    
  
    
  
    
  
    
  
    
  
    
  
    
        ,"post7": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://charlieoneill11.github.io/charlieoneill/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://charlieoneill11.github.io/charlieoneill/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Posts about deep learning, machine learning, causal inference, maths and computational neuroscience. ML researcher @ Macuject. UG Science + Eco @ ANU. Twitter: charlie0neill. LinkedIn here. Github: charlieoneill11. . Layout . Here are the articles I plan to write. Every article has a project associated with it to demonstrate the application of the idea. . Articles . Foundations . NN from scratch (incl. learner) to Pytorch process to fastai process. PROJECT: extreme generalisability of logic gates | Decorators in Python. PROJECT: TBD | Fastai callbacks. PROJECT: TBD | TabNet for tabular data. PROJECT: Implementing TabNet from scratch. | . FINAL BUILD: write Resnet18 from scratch, using the fastai methodology (see Chapter 19). . Sequential data, time-series and natural language . LSTMs for univariate time-series ✅ PROJECT: learn trigonometric curves 🚀 | LSTMs for multivariate, multi-output time series ✅ PROJECT: predict Bitcoin price in next two months 🚀 | Transforms and attention for sequential data. PROJECT: Either ULMFit or music generation | . FINAL BUILD: algorithmic trading bot - using deep learning for Optiver stock volatility prediction. . Natural language proessing . Language model from scratch using AWD-LSTM ✅ PROJECT: sentence generation using new fastai dataset 🚀 | Introduction to transformers with Hugging Face ✅ | Text classification with DistilBERT ✅ PROJECT: offensive tweet classification with TweetEval dataset 🚀 | Extractive question-answering with Hugging Face. PROJECT: Macuject natural language vision data extraction. | . Image data 🌌 . Pytorch training loops: convolutions and convnets ✅ PROJECT: Kuzushiji-MNIST 🚀 | Using the fastai training system: data collection and uploading, transfer learning. PROJECT: classifying satellite image data based on continent | Improving convolutional nets: residual connections and Resnet. PROJECT: FashionMNIST and CAM interpretation. | Fastai U-nets. PROJECT: Segmentation of tumours in lungs | Transformers for vision. PROJECT: compare performance with state-of-the-art CNNs | Object detection and YOLO5. PROJECT: recognising poker cards on a table | ConvNext. PROJECT: compare performance with state-of-the-art vision transformers. | . FINAL BUILD: end-to-end computer vision system for poker prediction. . Reinforcement learning 🕹 . TBD | . FINAL BUILD: AlphaZero Lite for checkers playing. . Graph/geometric ML 🧬 . TBD | . FINAL BUILD: using graph neural networks to construct causal models. . Generative adversarial networks . Neural style transfer | DeepDream | . FINAL BUILD: sequential image generation for images over time - OCT scans. . Computational neuroscience 🧠 . TBD | . FINAL BUILD: recreate prefrontal cortex and neuron activation dual-reinforcement meta-learning system. . MLOps 🚦 . Pipeline creation with Amazon Sagemaker and scikit-learn | Weights and biases logging. PROJECT: MNIST. | Nbdev for Jupyter notebooks Python package development. PROJECT: Pyject. | Why you need to learn to love conda environments. | . Miscellaneous . The pure maths of quantum mechanics: implemented in Julia | .",
          "url": "https://charlieoneill11.github.io/charlieoneill/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://charlieoneill11.github.io/charlieoneill/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}